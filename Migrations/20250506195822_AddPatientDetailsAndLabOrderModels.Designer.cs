// <auto-generated />
using System;
using LABOGRA.Services.Database.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LABOGRA.Migrations
{
    [DbContext(typeof(LabDbContext))]
    [Migration("20250506195822_AddPatientDetailsAndLabOrderModels")]
    partial class AddPatientDetailsAndLabOrderModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("LABOGRA.Models.LabOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PatientId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReferringPhysicianId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RegistrationDateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReferringPhysicianId");

                    b.ToTable("LabOrders");
                });

            modelBuilder.Entity("LABOGRA.Models.LabOrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LabOrderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReferenceRange")
                        .HasColumnType("TEXT");

                    b.Property<string>("Result")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResultUnit")
                        .HasColumnType("TEXT");

                    b.Property<int>("TestId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LabOrderId");

                    b.HasIndex("TestId");

                    b.ToTable("LabOrderItems");
                });

            modelBuilder.Entity("LABOGRA.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AgeUnit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("AgeValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MedicalRecordNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReferringPhysicianId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RegistrationDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ReferringPhysicianId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("LABOGRA.Models.ReferringPhysician", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ReferringPhysicians");
                });

            modelBuilder.Entity("LABOGRA.Models.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("LABOGRA.Models.LabOrder", b =>
                {
                    b.HasOne("LABOGRA.Models.Patient", "Patient")
                        .WithMany("LabOrders")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LABOGRA.Models.ReferringPhysician", "ReferringPhysician")
                        .WithMany()
                        .HasForeignKey("ReferringPhysicianId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Patient");

                    b.Navigation("ReferringPhysician");
                });

            modelBuilder.Entity("LABOGRA.Models.LabOrderItem", b =>
                {
                    b.HasOne("LABOGRA.Models.LabOrder", "LabOrder")
                        .WithMany("Items")
                        .HasForeignKey("LabOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LABOGRA.Models.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LabOrder");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("LABOGRA.Models.Patient", b =>
                {
                    b.HasOne("LABOGRA.Models.ReferringPhysician", "ReferringPhysician")
                        .WithMany()
                        .HasForeignKey("ReferringPhysicianId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ReferringPhysician");
                });

            modelBuilder.Entity("LABOGRA.Models.LabOrder", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("LABOGRA.Models.Patient", b =>
                {
                    b.Navigation("LabOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
